---
# Source: app/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: example-app
  labels:
    helm.sh/chart: app-0.1.7
    app.kubernetes.io/name: app
    app.kubernetes.io/instance: app
    app.kubernetes.io/version: "0.1.7"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http 
  selector:
    app.kubernetes.io/name: app
    app.kubernetes.io/instance: app
---
# Source: app/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-app
  labels:
    helm.sh/chart: app-0.1.7
    app.kubernetes.io/name: app
    app.kubernetes.io/instance: app
    app.kubernetes.io/version: "0.1.7"
    app.kubernetes.io/managed-by: Helm
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: app
      app.kubernetes.io/instance: app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: app
        app.kubernetes.io/instance: app
    spec:
      securityContext:
        {}
      containers:
        - name: app
          securityContext:
            {}
          image: "nginx:alpine"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          resources:
            {}
          lifecycle:
            {}
          startupProbe:
            exec:
              command:
              - ls
              - /tmp
            initialDelaySeconds: 5
            periodSeconds: 5
---
# Source: app/templates/statefulset.yaml
apiVersion: batch/v1
kind: StatefulSet
metadata:
  name: example-app
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: app
      app.kubernetes.io/instance: app
  serviceName: example-app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: app
        app.kubernetes.io/instance: app
    spec:
      containers:
        - image: bitnami/kubectl:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: KUBERNETES_SERVICE_HOST
              value: "kubernetes.default.svc.cluster.local"
            - name: KUBERNETES_SERVICE_PORT
              value: "443"
          command:
            - sh
            - c
            - while true; do kubectl exec deploy/example-app -- pwd ; sleep 5; done
        - image: bitnami/kubectl:latest
          imagePullPolicy: IfNotPresent
          env:
            - name: KUBERNETES_SERVICE_HOST
              value: "kubernetes.default.svc.cluster.local"
            - name: KUBERNETES_SERVICE_PORT
              value: "443"
          command:
            - sh
            - c
            - while true; do kubectl exec deploy/example-app -- hostname ; sleep 5; done
      serviceAccountName: job
---
# Source: app/templates/cron.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: example-app
spec:
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - image: bitnami/kubectl:latest
              imagePullPolicy: IfNotPresent
              env:
                - name: KUBERNETES_SERVICE_HOST
                  value: "kubernetes.default.svc.cluster.local"
                - name: KUBERNETES_SERVICE_PORT
                  value: "443"
              name: example-app
              command:
                - sh
                - -c
                - kubectl exec deploy/example-app -- php artisan schedule:run
          serviceAccountName: job
  schedule: "* * * * *"
---
# Source: app/templates/ingressroute.yaml
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: example-app
spec:
  entryPoints:
    - web
    - websecure
  routes:
    - kind: Rule
      match: Host(`example-app`)
      middlewares:
      - name: log-request
      services:
      - name: service-name
        port: 80
